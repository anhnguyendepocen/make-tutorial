\documentclass[12pt]{article}
\usepackage{mathpazo}
\usepackage{hyperref,url}
\usepackage[a4paper,margin=1.5cm]{geometry}
\usepackage{listings}
\begin{document}


\title{A tutorial introduction to Make for reproducible research}
\author{Iain Davies and Daniel Nuest and Stephen J Eglen}

\date{\today}
\maketitle


\section{Introduction}



<<rsetup,eval=TRUE,include=FALSE>>=
require(knitr)
require(rprojroot)
require(xtable)
options(width=60)
opts_chunk$set(cache=FALSE)
@

\section{Introduction}

Why make is useful.  Originally designed into 1970s for the efficient
compilation of programs.  Gradually adopted to other situations.


Note the workflow here

1. Generate
2. Analyse
3. Summarise


If Generating the data takes 10 hours, and analysing takes only 2
minutes, you don't want to rerun whole pipeline to regenerate data.


\section{Example problem}


\subsection{Estimating pi}

how to estimate pi with a dartboard.  \textbf{Iain: can you write this
section, explain how we solve the problem in the three steps above.}

\subsection{Traditional approach - write a batch file}



\lstset{language=sh}
\fbox{\lstinputlisting{v1-R/pi-workflow.sh}}

\subsection{Version 1 (R makefile)}


\fbox{\lstinputlisting{v1-R/Makefile}}


TODO Anatomy of a rule.

what is a rule?  target? dependency?  how it does it decide whether to
re-execute the rule (timestamps of files).

\subsection{Running it (for real)}


<<engine='bash'>>=
cd v1-R
make
@ 

This should generate a new pdf, `darts.pdf`.  If we then delete
darts.pdf by accident, when we run `make` again, it will not need to
run all steps of the analysis, as the intermediate files are still
present.


<<engine='bash'>>=
cd v1-R
rm darts.pdf
make
@ 



\begin{figure}
  \centering
	\includegraphics{v1-R/darts.pdf}
  \caption{Example output file, darts.pdf, created by "make" command.
  Blue (or red) points are those that were determined to be inside (or
  outside) the circle.  The estimate of pi, given in the title, was
  then given as 4*d/n, where d is the number of darts inside the
  circle and n is the total number of darts thrown.}
  \label{fig:darts}
\end{figure}



\subsection{DAG}

One nice thing about using a Makefile is usually you can visualize the
dependency graph.  e.g.  Figure~\ref{fig:dag}.  Input files are
clearly shown in green, and everything else in red can be regenerated.


\begin{figure}
  \centering
	\includegraphics{v1-R/graph.pdf}
  \caption{DAG for Makefile version 1.  green ellipses correspond to
    those files that are up to date and do not need to be regenerated;
  red ellipsis are those files that need to be remade.}
  \label{fig:dag}
\end{figure}


(This figure is generated by analysing the structure of the output
from the make program, thanks to a program from \url{makefile2graph})

\subsection{Explain what PHONY targets are}

Two common PHONY targets are the "all" and "clean" targets.  "make
all" by convention is a request to regenerate all the files in the
directory, rather than to generate a file called "all".  Likewise,
"clean" is a convention to remove all the files that can be deleted.




\clearpage

\section{ersion 2 -- generate lots of simulations}

In version 2, we want to highlight how to make rules more flexible.
Example application here would be generating lots of simulation runs,
rather than just one.


\fbox{\lstinputlisting{v1-R/Makefile2}}

Try to generate B=15 samples, and then show a histogram of the
distribution of the B estimates of pi.


<<engine='bash'>>=
cd v1-R
make -f Makefile2
cat pi-*est
@ 


Describe make -j8 to run this in parallel.


NOTE: intermediate files are not kept.  

Perhaps show a 4x3 grid of 12 simulations?

\section{What next}

Further reading (books); other programs that build upon idea of make
(snakemake, drake).

\url{https://www.frontiersin.org/articles/10.3389/fninf.2016.00002/full}

Portable make code: \url{https://github.com/markpiffer/gmtt}


\subsection{Acknowledgements}

Mozilla CODECHECK for funding



\end{document}
